{"version":3,"sources":["utils/others/strModification.js","components/Navbar/Navbar.jsx","components/CardIcon/CardIcon.jsx","components/Footer/Footer.jsx","components/Card/Card.jsx","pages/Home/Home.jsx","components/Pagination/Pagination.jsx","utils/fetch/searchData.js","components/Board/Board.jsx","pages/Information/Information.jsx","components/Chart/Chart.jsx","pages/Graphics/Graphics.jsx","App.js","index.js"],"names":["module","exports","capitalice","str","charAt","toUpperCase","slice","Navbar","useState","open","setOpen","history","useHistory","location","useLocation","navbar","db","components","liClass","clickHandler","e","preventDefault","pathname","push","href","this","getAttribute","offsetTop","document","querySelector","window","scroll","top","behavior","classList","contains","clickHandlerRender","useEffect","links","querySelectorAll","linksRender","addEventListener","className","onClick","src","alt","map","section","index","type","to","name","CardIcon","library","add","faFacebookF","faInstagram","faLinkedinIn","faGithub","target","rel","icon","Footer","faPhoneAlt","faEnvelope","Card","animate","data","photosrc","imgsrc","id","title","text","Home","secions","Object","keys","i","LEFT_PAGE","RIGHT_PAGE","range","from","step","Pagination","props","fetchPageNumbers","totalRecords","getElementById","parseInt","innerHTML","pageLimit","totalPages","Math","ceil","currentPage","state","pageNeighbours","totalNumbers","startPage","max","endPage","min","pages","hasLeftSpill","hasRightSpill","spillOffset","length","extraPages","gotoPage","page","onPageChanged","f","paginationData","setState","handleClick","evt","handleMoveLeft","handleMoveRight","Component","defaultObject","info","count","next","results","request","url","a","signal","def","fetch","response","ok","json","JSON","parse","console","warn","error","filterDataObjectList","labels","obj","objData","forEach","label","filterD","urlBase","schema","filters","newUrl","element","getAll","temporalData","optionsLabel","val","indexOf","clicFirstPage","selector","btn","click","Board","menu","filterData","URL_BASE","setData","loading","setloading","input","setinput","order","objSelect","filter","value","setValue","totalData","setTotalData","setCurrentPage","setTotalRecords","setPageLimit","form","includes","v","handleChange","event","handleChangeInput","filterDataDisplay","filterList","filterObject","then","res","r","result","lab","dataModification","sort","sorted","orderDataDisplay","toLowerCase","searchDataDisplay","b","as","con","AbortController","fdt","abort","final","key","htmlFor","onChange","options","l","index2","Fragment","camp","ndx2","dt","offset","Information","path","replace","maintainAspectRatio","responsive","dataEmpty","datasets","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","Chart","values","setValues","setLoading","chartData","style","width","height","Error","Graphics","description","App","exact","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7cc63bac.chunk.js","sourcesContent":["/**\r\n * @param {string} str :  string que se capitalizará\r\n * @returns {string} string con la primera letra en mayuscula \r\n */\r\nfunction capitalice(str){\r\n    return str.charAt(0).toUpperCase() + str.slice(1)\r\n}\r\n\r\nmodule.exports = {\r\n    capitalice\r\n}","// React\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Link, useLocation, useHistory } from \"react-router-dom\"\r\n// CSS & JSON\r\nimport \"./Navbar.css\";\r\nimport db from \"../../data/data\"\r\n\r\nconst Navbar = () => {\r\n    // Declaration of the Hooks\r\n    const [open, setOpen] = useState(false)\r\n    const history = useHistory();\r\n    let location = useLocation();\r\n    // img\r\n    const logo = \"Navbar/Logo.png\"\r\n    // JSON file where the component information is located\r\n    const navbar = db.components.Navbar\r\n    // Class that the li of the navigation bar will have\r\n    const liClass = \"menu-options__element theme--original\"\r\n\r\n    /**\r\n     * Redirect in case of clicking on a tag \"a\" with href \"#\"\r\n     * @param {object} e evento\r\n     */\r\n    function clickHandler(e) {\r\n        e.preventDefault();\r\n        if (!(location.pathname === \"/\")) {\r\n            history.push(\"/\");\r\n        }\r\n        // Get the top height of the element\r\n        const href = this.getAttribute(\"href\");\r\n        const offsetTop = document.querySelector(href) ? document.querySelector(href).offsetTop : 0;\r\n        // Make the element scroll smoothly\r\n        window.scroll({\r\n            top: offsetTop - 50,\r\n            behavior: \"smooth\"\r\n        });\r\n        // If it is a screen with a drop-down menu, we make the menu appear\r\n        const menuOptions = document.querySelector(\".menu-options\")\r\n        if (menuOptions.classList.contains('menu-options-list-dropdown--enable')) {\r\n            setOpen(false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function in charge of raising the scroll when a page is rendered\r\n     * @param {*} e \r\n     */\r\n    function clickHandlerRender(e) {\r\n        window.scroll({\r\n            top: 0,\r\n            behavior: \"smooth\"\r\n        });\r\n        // If it is a screen with a drop-down menu, we make the menu appear\r\n        const menuOptions = document.querySelector(\".menu-options\")\r\n        if (menuOptions.classList.contains('menu-options-list-dropdown--enable')) {\r\n            setOpen(false);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const links = document.querySelectorAll('a[href^=\"#\"]');\r\n        const linksRender = document.querySelectorAll('a[href^=\"/\"]');\r\n        for (const link of links) {\r\n            link.addEventListener(\"click\", clickHandler);\r\n        }\r\n        for (const linkR of linksRender) {\r\n            linkR.addEventListener(\"click\", clickHandlerRender);\r\n        }\r\n    },[location]);\r\n\r\n    return (\r\n        <header className={`${open ? \"header-open\" : \"\"}`} >\r\n            <div className=\"theme--1 navbar-Container\">\r\n                <div className=\"navbar\">\r\n                    <button className=\"dropdown-menu-button\" onClick={() => { setOpen(!open) }}>\r\n                        <div className={`menu menu--X ${open ? \"open\" : \"\"}`}>\r\n                            <span className=\"menu__bar\"></span>\r\n                        </div>\r\n                    </button>\r\n                    <div className={`logo ${open ? \"menu-options-list-dropdown--disable\" : \"\"}`}>\r\n                        Rick & Morty\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <nav className={`theme--1 ${open ? \"menu-options-list-dropdown--enable\" : \"\"}`}>\r\n                <div className={`menu-options ${open ? \"menu-options-list-dropdown--enable\" : \"menu-options-list-dropdown--disable\"}`}>\r\n                    <div className=\"logo--dropdown logo\">\r\n                        <img src={logo} alt=\"\" className=\"logo__img\" />\r\n                    </div>\r\n                    <ul className={`menu-options-list`}>\r\n                        {navbar.map((section, index) => {\r\n                            return section.type === \"Link\" ? <li key={\"nav-li-\" + index} ><Link className={liClass} to={section.href}>{section.name}</Link></li> : <li key={\"nav-li-\" + index}><a className={liClass} href={section.href}>{section.name}</a></li>\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Navbar;\r\n","import { faFacebookF, faInstagram, faLinkedinIn, faGithub } from '@fortawesome/free-brands-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport \"./CardIcon.css\"\r\n\r\nconst  CardIcon = () => {\r\n    library.add(faFacebookF,faInstagram,faLinkedinIn,faGithub)\r\n    return ( \r\n        <div className=\"icon--socialMedia\">\r\n            <a className=\"facebook\" href=\"https://www.facebook.com/RickandMorty/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                <FontAwesomeIcon className=\"icon\" icon={['fab', 'facebook-f']}/>\r\n            </a>\r\n            <a className=\"instagram\" href=\"https://www.instagram.com/rickandmorty/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                <FontAwesomeIcon className=\"icon\" icon={['fab', 'instagram']}/>\r\n            </a>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardIcon;","import { faPhoneAlt, faEnvelope } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\n\r\nimport { Link } from \"react-router-dom\"\r\nimport db from \"../../data/data\"\r\nimport \"./Footer.css\"\r\nimport CardIcon from \"../CardIcon/CardIcon\"\r\n\r\n\r\nconst Footer = () => {\r\n    library.add(faPhoneAlt,faEnvelope)\r\n    const navbar = db.components.Navbar\r\n    const liClass = \"menu-options__element menu-options__element--footer \"\r\n    return (\r\n    <footer className=\"theme--1\">\r\n        <div className=\"footer-elements\">\r\n            <div className=\"footerSection--nav\">\r\n                <ul className=\"menu-options-list\">\r\n                    {navbar.map((section, index) => {\r\n                            return section.type === \"Link\" ? <li key={\"nav-li-\"+index} ><Link className={liClass} to={section.href}>{section.name}</Link></li> : <li key={\"nav-li-\"+index}><a className={liClass} href={section.href}>{section.name}</a></li>\r\n                        })}\r\n                </ul>\r\n            </div>\r\n            <div className=\"footerSection--SocialMedia\">\r\n                <h3 className=\"text--center\">Social Media</h3>\r\n                <CardIcon />\r\n            </div>\r\n            <div className=\"footerSection--contact\">\r\n                    <div  >\r\n                        <h3  >\r\n                            <FontAwesomeIcon className=\"icon\" icon={['fas', 'envelope']}/> \r\n                            michaeldamurq@gmail.com\r\n                        </h3>\r\n                    </div>\r\n                    <div  >\r\n                        <h3  >\r\n                            <FontAwesomeIcon className=\"icon\" icon={['fas', 'phone-alt']}/> \r\n                            +58 416 654 16 76\r\n                        </h3>\r\n                    </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div  >\r\n            <h3 className=\"mini-title-2 text--center text-dark\">Personal Project - Rick & Morty API</h3>\r\n        </div>\r\n    </footer>);\r\n}\r\n\r\nexport default Footer;","// React\r\nimport { Link } from \"react-router-dom\"\r\n// CSS y JSON\r\nimport db from \"../../data/data\"\r\nimport \"./Card.css\"\r\n\r\nconst Card = ({ section, animate }) => {\r\n    const data = db.components.Card[section]\r\n    let photosrc = data.imgsrc\r\n\r\n    return (\r\n        <div id={section} className={\"Card theme--1 home--\" + section}>\r\n            <div className={\"Card-content animate \" + animate}>\r\n                <div className=\"Card__sectionContent Card__section--first\">\r\n                    <h2 className=\"title\">{data.title}</h2>\r\n                    <p className=\"mini-title\">\r\n                        {data.text}\r\n                    </p>\r\n                </div>\r\n                <div className=\"Card__sectionImage\">\r\n                    <img src={photosrc} alt=\"\" />\r\n                </div>\r\n            </div>\r\n            <div className=\"seeMore\">\r\n                <div className=\"line\">\r\n                </div>\r\n                <Link to={\"/\" + section} className=\"button-dark\">more</Link>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import \"./Home.css\"\r\nimport Card from '../../components/Card/Card'\r\nimport db from \"../../data/data\"\r\nimport React from 'react'\r\n\r\nconst Home = ()=>{\r\n    let photo = \"Home/Afiche.jpg\"\r\n    const secions = Object.keys(db.components.Card)\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            <div className=\"presentation\">\r\n                <img src={photo} alt=\"\" className=\"cover\" />\r\n            </div>\r\n            {secions.map((section,i) => {\r\n                return (\r\n                    <Card key={\"card__\"+section} section={section} animate={ i%2===0 ? \"\": \"animate-left\"}/>)\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","// Reac\r\nimport React, { Component, Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\n// CSS\r\nimport './Pagination.css'\r\n\r\n//CONST\r\nconst LEFT_PAGE = 'LEFT';\r\nconst RIGHT_PAGE = 'RIGHT';\r\n\r\n/**\r\n * Helper method for creating a range of numbers\r\n * range(1, 5) => [1, 2, 3, 4, 5]\r\n */\r\nconst range = (from, to, step = 1) => {\r\n  let i = from;\r\n  const range = [];\r\n  while (i <= to) {\r\n    range.push(i);\r\n    i += step;\r\n  }\r\n  return range;\r\n}\r\n\r\nclass Pagination extends Component {    \r\n    /**\r\n    *---PROPS\r\n    * totalRecords indicates the total number of records to be paged. Mandatory.\r\n    * pageLimit indicates the number of records displayed per page. If not specified, reverts to default\r\n    * pageNeighbours indicates the number of additional pages to display on each side of the current page. The minimum value is 0 and the maximum value is 2. If not specified, it returns to the value 0\r\n    * total pages\r\n    *\r\n    *---STATES\r\n    * currentPage       Current pages\r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n        const { totalRecords = null, pageLimit = 30, pageNeighbours = 0 } = props;\r\n        this.pageLimit = typeof pageLimit === 'number' ? pageLimit : 30;\r\n        this.totalRecords = typeof totalRecords === 'number' ? totalRecords : 0;\r\n        // pageNeighbours can be: 0, 1 or 2\r\n        this.pageNeighbours = typeof pageNeighbours === 'number'\r\n        ? Math.max(0, Math.min(pageNeighbours, 2))\r\n        : 0;\r\n        this.totalPages = Math.ceil(this.totalRecords / this.pageLimit);\r\n        this.state = { currentPage: 1 };\r\n    }\r\n  /**\r\n   * Let's say we have 10 pages and we set pageNeighbours to 2\r\n   * Given that the current page is 6\r\n   * The pagination control will look like the following:\r\n   *\r\n   * (1) < {4 5} [6] {7 8} > (10)\r\n   *\r\n   * (x) => terminal pages: first and last page(always visible)\r\n   * [x] => represents current page\r\n   * {...x} => represents page neighbours\r\n   */\r\n  fetchPageNumbers = () => {\r\n    const totalRecords = document.getElementById(\"totalRecords\") !==null \r\n      ? parseInt(document.getElementById(\"totalRecords\").innerHTML) > this.pageLimit \r\n        ? parseInt(document.getElementById(\"totalRecords\").innerHTML)\r\n        : this.pageLimit + 1\r\n      : this.totalRecords\r\n    this.totalPages = Math.ceil(totalRecords / this.pageLimit);\r\n    const totalPages =  this.totalPages;\r\n    const currentPage = this.state.currentPage;\r\n    const pageNeighbours = this.pageNeighbours;\r\n    /**\r\n     * totalNumbers: the total page numbers to show on the control\r\n     * totalBlocks: totalNumbers + 2 to cover for the left(<) and right(>) controls\r\n     */\r\n    const totalNumbers = (this.pageNeighbours * 2) + 3;\r\n    const totalBlocks = totalNumbers + 2;\r\n    if (totalPages > totalBlocks) {\r\n      const startPage = Math.max(2, currentPage - pageNeighbours);\r\n      const endPage = Math.min(totalPages - 1, currentPage + pageNeighbours);\r\n      let pages = range(startPage, endPage);\r\n      /**\r\n       * hasLeftSpill: has hidden pages to the left\r\n       * hasRightSpill: has hidden pages to the right\r\n       * spillOffset: number of hidden pages either to the left or to the right\r\n       */\r\n      const hasLeftSpill = startPage > 2;\r\n      const hasRightSpill = (totalPages - endPage) > 1;\r\n      const spillOffset = totalNumbers - (pages.length + 1);\r\n\r\n      switch (true) {\r\n        // handle: (1) < {5 6} [7] {8 9} (10)\r\n        case (hasLeftSpill && !hasRightSpill): {\r\n          const extraPages = range(startPage - spillOffset, startPage - 1);\r\n          pages = [LEFT_PAGE, ...extraPages, ...pages];\r\n          break;\r\n        }\r\n        // handle: (1) {2 3} [4] {5 6} > (10)\r\n        case (!hasLeftSpill && hasRightSpill): {\r\n          const extraPages = range(endPage + 1, endPage + spillOffset);\r\n          pages = [...pages, ...extraPages, RIGHT_PAGE];\r\n          break;\r\n        }\r\n        // handle: (1) < {4 5} [6] {7 8} > (10)\r\n        case (hasLeftSpill && hasRightSpill):\r\n        default: {\r\n          pages = [LEFT_PAGE, ...pages, RIGHT_PAGE];\r\n          break;\r\n        }\r\n      }\r\n      return [1, ...pages, totalPages];\r\n    }\r\n    return range(1, totalPages);\r\n  }\r\n\r\n   render() {\r\n    if (!this.totalRecords || this.totalPages === 1) return null;\r\n\r\n    const { currentPage } = this.state;\r\n    const pages = this.fetchPageNumbers();\r\n\r\n    return (\r\n      <Fragment>\r\n        <nav className=\"navPagination\">\r\n          <ul className=\"pagination\">\r\n            { pages.map((page, index) => {\r\n\r\n              if (page === LEFT_PAGE) return (\r\n                <li key={index} className=\"page-item\">\r\n                  <button className=\"page-link\" aria-label=\"Previous\" onClick={this.handleMoveLeft}>\r\n                    <span aria-hidden=\"true\">&laquo;</span>\r\n                    <span className=\"sr-only\">Previous</span>\r\n                  </button>\r\n                </li>\r\n              );\r\n\r\n              if (page === RIGHT_PAGE) return (\r\n                <li key={index} className=\"page-item\">\r\n                  <button className=\"page-link\" aria-label=\"Next\" onClick={this.handleMoveRight}>\r\n                    <span aria-hidden=\"true\">&raquo;</span>\r\n                    <span className=\"sr-only\">Next</span>\r\n                  </button>\r\n                </li>\r\n              );\r\n\r\n              return (\r\n                <li key={index} className={`page-item${ currentPage === page ? ' active' : ''}`}>\r\n                  <button className=\"page-link\" onClick={ this.handleClick(page) }>{ page }</button>\r\n                </li>\r\n              );\r\n\r\n            }) }\r\n\r\n          </ul>\r\n        </nav>\r\n      </Fragment>\r\n    );\r\n  }\r\n   componentDidMount() {\r\n    this.gotoPage(1);\r\n  }\r\n\r\n  gotoPage = page => {\r\n    /**\r\n     * onPageChanged onPageChanged es una función invocada con datos del estado de paginación actual solo cuando la página actual cambia.\r\n     */\r\n    const { onPageChanged = f => f } = this.props;\r\n    const currentPage = Math.max(0, Math.min(page, this.totalPages));\r\n    const paginationData = {\r\n      currentPage,\r\n      totalPages: this.totalPages,\r\n      pageLimit: this.pageLimit,\r\n      totalRecords: this.totalRecords\r\n    };\r\n\r\n    this.setState({ currentPage }, () => onPageChanged(paginationData));\r\n  }\r\n\r\n  handleClick = page => evt => {\r\n    evt.preventDefault();\r\n    this.gotoPage(page);\r\n  }\r\n\r\n  handleMoveLeft = evt => {\r\n    evt.preventDefault();\r\n    this.gotoPage(this.state.currentPage - (this.pageNeighbours * 2) - 1);\r\n  }\r\n\r\n  handleMoveRight = evt => {\r\n    evt.preventDefault();\r\n    this.gotoPage(this.state.currentPage + (this.pageNeighbours * 2) + 1);\r\n  }\r\n}\r\n\r\nPagination.propTypes = {\r\n  totalRecords: PropTypes.number.isRequired,\r\n  pageLimit: PropTypes.number,\r\n  pageNeighbours: PropTypes.number,\r\n  onPageChanged: PropTypes.func\r\n};\r\n\r\nexport default Pagination;","var defaultObject = {\r\n    info: {\r\n        count: 0,\r\n        next: null,\r\n        pages: 0\r\n    },\r\n    results: []\r\n}\r\n\r\n/**\r\n * Hace una solicitud a una api y retornar el resultado como un objeto\r\n * @param {string} url :  url a la que se ralizará la petición\r\n * @param {object | null} signal :  objeto con una instancia de AbourtController \r\n * @param {obj | null} def : objeto a retornar en caso de petición incorrecta, valor por defecto\r\n * { info: {count: 0, next: null, pages: 0 }, results: []}\r\n * @returns {object} objeto con la data devuelta por la api o un objeto vacio\r\n */\r\nasync function request(url, signal=null, def = null) {\r\n    try {\r\n        const response = (signal !== null) ? await fetch(url, {signal}) : await fetch(url)\r\n        if (response.ok) {\r\n            const data = await response.text();\r\n            const json = JSON.parse(data);\r\n            return json;\r\n        }\r\n        else {\r\n            console.warn(response)\r\n            return (def !== null) ? def : defaultObject\r\n        }\r\n    }\r\n    catch (e) {\r\n        console.error(e)\r\n        return (def !== null) ? def : defaultObject\r\n    }\r\n}\r\n\r\n/**\r\n * Filtra los datos de objetos en una lista de objetos y devuelve una lista con todos los objetos\r\n * pero con los datos filtrados \r\n * @param {list} labels Lista de los nombre de los atributos a mantener\r\n * @param {list} data Lista de objetos a filtrar\r\n * @returns {list}\r\n */\r\nfunction filterDataObjectList(labels, data) {\r\n    let newData = data.map((obj) => {\r\n        let objData = {}\r\n        labels.forEach((label) => {\r\n            objData[label] = obj[label];\r\n        })\r\n        return objData;\r\n    })\r\n    return newData\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} urlBase El Url base para hacer consultas a la API \r\n * @param {string} schema  El Schema al que se va consultar\r\n * @param {object} filters Un objeto, donde los atributos son los campos a filtrar y los valores asociados\r\n * son los elementos por los que se buscará. Example: {name:\"rick\"}\r\n * @param {object | null} signal :  objeto con una instancia de AbourtController \r\n * @return\r\n */\r\nasync function filterD(urlBase, schema, filters = {}, signal=null) {\r\n    let newUrl = urlBase + schema\r\n    Object.keys(filters).forEach((element, index) => {\r\n        if (index === 0) {\r\n            newUrl += \"/?\" + element + \"=\" + filters[element];\r\n        }\r\n        else {\r\n            newUrl += \"&\" + element + \"=\" + filters[element];\r\n        }\r\n    })\r\n    return newUrl\r\n}\r\n\r\n/**\r\n * Obtiene todos los resultados de una consulta general a una API con paginación y devulvelve una lista,\r\n * además filtra los atributos de los objetos de la lista\r\n * @param {string} urlBase La url base de la api a consultar, debe tener el formato:\r\n * url.com/?schema\r\n * @param {string} schema Esquema a consultar \r\n * @param {list} labels Lista de los nombre de los atributos a mantener\r\n * @param {boolean} chart \r\n * @param {object | null} signal :  objeto con una instancia de AbourtController \r\n * @returns {list} Lista de resultados\r\n */\r\nasync function getAll(urlBase = \"\", schema = \"\", labels, signal=null) {\r\n    let info = []\r\n    let next = typeof urlBase === \"string\" ? urlBase + schema : null\r\n    while (next !== null) {\r\n        let data = await request(next,signal)\r\n        next = data.info.next\r\n        info.push(...filterDataObjectList(labels, data.results));\r\n    }\r\n    return info;\r\n}\r\n\r\n/**\r\n * \r\n * @param {*} urlBase \r\n * @param {*} schema \r\n * @param {*} label \r\n * @param {*} optionsLabel \r\n * @param {*} signal \r\n * @returns \r\n */\r\nasync function chartData(urlBase = \"\", schema = \"\", label , signal=null) {\r\n    // get all records of the API\r\n    let data = await getAll(urlBase,schema,[label],signal)\r\n    // Create an Array the size of the optionsLabel and fill with zeros\r\n    let temporalData = []\r\n    let optionsLabel = []\r\n    data.forEach((val) => {\r\n        if (optionsLabel.indexOf(val[label])===-1){\r\n            optionsLabel.push(val[label]);\r\n            temporalData.push(1)\r\n        }\r\n        else{\r\n            temporalData[optionsLabel.indexOf(val[label])]++;\r\n        }\r\n    });\r\n    return [optionsLabel,temporalData]\r\n}\r\n\r\nasync function optionsLabel(urlBase = \"\", schema = \"\", label , signal=null) {\r\n    // get all records of the API\r\n    let data = await getAll(urlBase,schema,[label],signal)\r\n    let result = []\r\n    data.forEach((item,index)=>{\r\n        if (result.indexOf(item[label])===-1){\r\n            result.push(item[label])\r\n        }\r\n    })\r\n    return result\r\n}\r\n\r\nexport {\r\n    chartData,\r\n    filterD,\r\n    filterDataObjectList,\r\n    getAll,\r\n    optionsLabel,\r\n    request,\r\n};","// React\r\nimport React from \"react\"\r\nimport { useEffect, useState } from \"react\"\r\n// Components\r\nimport Pagination from '../Pagination/Pagination'\r\n// Functions\r\nimport { getAll, filterDataObjectList, request, filterD } from '../../utils/fetch/searchData'\r\nimport { capitalice } from \"../../utils/others/strModification\"\r\n// CSS and JSON\r\nimport filterData from '../../data/filterData.json'\r\nimport \"./Board.css\"\r\n\r\n/**\r\n * clicks a button\r\n * @param {string} selector Query selector\r\n */\r\nfunction clicFirstPage(selector) {\r\n    let btn = document.querySelector(selector)\r\n    if (btn) {\r\n        btn.click();\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a new object where the attributes included in filterList are not present\r\n * @param {Object} obj Base object\r\n * @param {Array} filterList List of attributes to remove from the object\r\n * @returns new object\r\n */\r\nfunction filterObject(obj, filterList) {\r\n    let objData = {}\r\n    Object.keys(obj).forEach((v) => {\r\n        if (!(filterList.includes(obj[v]))) {\r\n            objData[v] = obj[v];\r\n        }\r\n    })\r\n    return objData;\r\n}\r\n\r\nconst Board = ({ schema }) => {\r\n    // Variables\r\n    const menu = filterData[schema][\"menu\"]                         // Object that contains the search, sort and filter menus of each scheme\r\n    const URL_BASE = \"https://rickandmortyapi.com/api/\" + schema      // API URL\r\n    // States\r\n    const [data, setData] = useState([])                    // Data to show in the current table\r\n    const [loading, setloading] = useState(true)            // Loading states\r\n    const [input, setinput] = useState(\"\")                  // Lookup input value\r\n    const [value, setValue] = useState({\r\n        order: objSelect(\"order\"), filter: objSelect(\"filter\")\r\n    })                                                      // Selects values\r\n    //pagination\r\n    const [totalData, setTotalData] = useState([])          // All records resulting from a search, filter or sort\r\n    const [, setCurrentPage] = useState(1)                  // Current page\r\n    const [totalRecords, setTotalRecords] = useState(21)    // Number of total records that must be paginated\r\n    const [pageLimit, setPageLimit] = useState(20)          // Number of records to display in the current table\r\n\r\n    /**\r\n    * Returns an object where we have the first options of each select\r\n    * @param {string} form section, \"order\" or \"filter\"\r\n    * @returns {object}\r\n     * @returns {object} \r\n    * @returns {object}\r\n    * example\r\n    * {gender: 'Male', status: 'Alive', species: 'Human'}\r\n    */\r\n    function objSelect(form) {\r\n        let objData = {}\r\n        if (Object.keys(menu).includes(form)) {\r\n            menu[form].forEach((v) => {\r\n                objData[v[\"label\"]] = v[\"options\"][0];\r\n            })\r\n        }\r\n        return objData;\r\n    }\r\n\r\n    /**\r\n    * Allows you to handle changes in the sort and filter selets\r\n    * @param {object} event\r\n     */\r\n    const handleChange = (event) => {\r\n        let obj = { ...value }\r\n        obj[event.target.className][event.target.name] = event.target.value\r\n        setValue(obj)\r\n    }\r\n\r\n    /**\r\n    * Allows you to handle changes in the search input\r\n    * @param {object} event\r\n     */\r\n    function handleChangeInput(e) {\r\n        setinput(e.target.value);\r\n    }\r\n\r\n    /**\r\n     * Sort the data alphabetically\r\n     */\r\n    function orderDataDisplay() {\r\n        if ((value[\"order\"][\"name\"] === \"A-Z\") || (value[\"order\"][\"name\"] === \"Z-A\")) {\r\n            if (totalData.length === 0) {\r\n                getAll(\"https://rickandmortyapi.com/api/\", schema, filterData[schema][\"data\"]).then((res) => {\r\n                    setTotalData(res.sort(sorted))\r\n                })\r\n            } else {\r\n                let result = []\r\n                result = totalData.sort(sorted)\r\n                totalData.length <= pageLimit ? setData(result.map((i) => i)) : setTotalData(result)\r\n                clicFirstPage('button.page-link')\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Filter the data\r\n     */\r\n    function filterDataDisplay() {\r\n        let filters = filterObject(value[\"filter\"], [\"Selececione una opción\"])\r\n        if (totalData.length === 0) {\r\n            filterD(\"https://rickandmortyapi.com/api/\", schema, filters).then((res) => {\r\n                getAll(res, \"\", filterData[schema][\"data\"]).then((r) => {\r\n                    r.length !== 0 ? setTotalData(r) : setData(r)\r\n                })\r\n            })\r\n        } else {\r\n            let result = []\r\n            Object.keys(filters).forEach((lab, index) => {\r\n                result = index === 0\r\n                    ? totalData.filter(element => element[lab] === value[\"filter\"][lab])\r\n                    : result.filter(element => element[lab] === value[\"filter\"][lab])\r\n            })\r\n            result.length !== 0 ? setTotalData(result) : setData(result)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Search by search input\r\n     */\r\n    function searchDataDisplay() {\r\n        if (totalData.length === 0) {\r\n            filterD(\"https://rickandmortyapi.com/api/\", schema, { name: input }).then((res) => {\r\n                getAll(res, \"\", filterData[schema][\"data\"]).then((r) => {\r\n                    r.length !== 0 ? setTotalData(r) : setData(r)\r\n                })\r\n            })\r\n        }\r\n        else {\r\n            let result = totalData.filter(element => element[\"name\"].toLowerCase().includes(input.toLowerCase()))\r\n            result.length !== 0 ? setTotalData(result) : setData(result)\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Identifies the button pressed and activates the corresponding action\r\n     * @param {object} event\r\n     */\r\n    function dataModification(event) {\r\n        event.preventDefault()\r\n        const className = event.target.className;\r\n        setloading(true)\r\n        if (className.includes(\"order\")) {\r\n            orderDataDisplay()\r\n        }\r\n        else if (className.includes(\"filter\")) {\r\n            filterDataDisplay()\r\n        }\r\n        else if (className.includes(\"search\")) {\r\n            searchDataDisplay()\r\n        }\r\n        setloading(false)\r\n    }\r\n\r\n    /**\r\n     * Sort A-Z or Z-A 2 items\r\n     * @param {object} a \r\n     * @param {object} b \r\n     * @returns \r\n     */\r\n    function sorted(a, b) {\r\n        const as = value[\"order\"][\"name\"] === \"A-Z\" ? 1 : -1\r\n        if (a.name > b.name) {\r\n            return 1 * as;\r\n        }\r\n        if (a.name < b.name) {\r\n            return -1 * as;\r\n        }\r\n        // a must be equal to b\r\n        return 0;\r\n    };\r\n\r\n    /**\r\n     * Allow change the page\r\n     * @param {object} dt\r\n     *  dt = {\r\n     *      currentPage,\r\n     *      totalPages: this.totalPages,\r\n     *      pageLimit: this.pageLimit,\r\n     *      totalRecords: this.totalRecords\r\n     * }\r\n     */\r\n    const onPageChanged = dt => {\r\n        if (totalData.length === 0) {\r\n            setCurrentPage(dt.currentPage);\r\n            let url = dt.currentPage === 1 ? URL_BASE : URL_BASE + \"?page=\" + dt.currentPage\r\n            request(url)\r\n                .then((response) => {\r\n                    setTotalRecords(response[\"info\"][\"count\"]);\r\n                    if (response.results.length > 0) {\r\n                        setPageLimit(response.results.length);\r\n                        let fdt = filterDataObjectList(filterData[schema][\"data\"], response.results);\r\n                        setData(fdt);\r\n                    }\r\n                })\r\n        } else {\r\n            const offset = (dt.currentPage - 1) * dt.pageLimit;\r\n            setTotalRecords(totalData.length);\r\n            setData(totalData.slice(offset, offset + dt.pageLimit));\r\n            setCurrentPage(dt.currentPage);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        // Verify if the data list where the set of all records is stored is empty       \r\n        if (totalData.length === 0) {\r\n            const con = new AbortController();\r\n            let { signal } = con\r\n            // Verify that the schema to show is in our list of schemas\r\n            if (Object.keys(filterData).includes(schema)) {\r\n                request(URL_BASE, signal)\r\n                    .then((response) => {\r\n                        setTotalRecords(response[\"info\"][\"count\"]);\r\n                        if (response.results.length > 0) {\r\n                            setPageLimit(response.results.length);\r\n                            let fdt = filterDataObjectList(filterData[schema][\"data\"], response.results);\r\n                            setData(fdt);\r\n                            setloading(false)\r\n                        }\r\n                    })\r\n            }\r\n            return () => con.abort();\r\n        }\r\n        else {\r\n            setTotalRecords(totalData.length);\r\n            let final = totalData.length >= 20 ? 19 : totalData.length\r\n            // Data to show\r\n            setData(totalData.slice(0, final));\r\n            setCurrentPage(1);\r\n            // Update the table\r\n            clicFirstPage('button.page-link')\r\n        }\r\n    }, [totalData, schema, URL_BASE]);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className={`menu-billboard menu-billboard--${schema}`}>\r\n                {Object.keys(menu).map((key) => {\r\n                    return (\r\n                        <form key={\"form--\" + key} className=\"menu--page\">\r\n                            <h2 className=\"subtitle--1\">{capitalice(key)}</h2>\r\n                            <div className=\"menu__imputs\">\r\n                                {menu[key].map((i, index) => {\r\n                                    return (\r\n                                        <label key={\"label\" + key + index} htmlFor={i.label}>\r\n                                            {capitalice(i.label)}\r\n                                            {i.type !== \"select\"\r\n                                                ? <input value={input} onChange={handleChangeInput} className={key} type={i.type} name={i.label} />\r\n                                                : <select name={i.label} className={key} value={value[key][i.label]} onChange={handleChange}>\r\n                                                    {i.options.map((l, index2) => {\r\n                                                        return (\r\n                                                            <option key={key + \"__option\" + index2} value={l}>{l}</option>)\r\n                                                    })}\r\n                                                </select>}\r\n                                        </label>\r\n                                    )\r\n                                })}\r\n                            </div>\r\n                            <div className=\"container__btn\">\r\n                                <button id={\"btn-sello-\" + key} className={\"btn--sello \" + key} onClick={dataModification}>{capitalice(key)}</button>\r\n                            </div>\r\n                        </form>)\r\n                })}\r\n            </div>\r\n            <div className=\"container__btn\">\r\n                <button className=\"btn--sello\" onClick={() => { setTotalData([]) }}>Reiniciar Busqueda</button>\r\n            </div>\r\n            <div id=\"board\" className=\"board\">\r\n                <div className=\"data\">\r\n                    <h2>{schema.charAt(0).toUpperCase() + schema.slice(1) + \"s\"}</h2>\r\n                    {loading\r\n                        ? <div className=\"center-container\"><div className=\"lds-facebook\"><div></div><div></div><div></div></div></div>\r\n                        : data.length > 0\r\n                            ? (<React.Fragment>\r\n                                <table>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            {Object.keys(data[0]).map((val, i) => {\r\n                                                return (\r\n                                                    <th key={val + \"--\" + i}>{val}</th>\r\n                                                )\r\n                                            })}\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {data.map((obj) => {\r\n                                            return (\r\n                                                <tr key={\"obj--\" + obj.id}>\r\n                                                    {Object.keys(obj).map((camp, ndx2) => {\r\n                                                        return (<td key={\"camp--\" + ndx2 + camp + obj.id}>{obj[camp]}</td>)\r\n                                                    })}\r\n                                                </tr>\r\n                                            )\r\n                                        })}\r\n                                    </tbody>\r\n                                </table>\r\n                                <div className=\"\">\r\n                                    <div id=\"totalRecords\" className=\"none\" name={totalRecords} >{totalRecords}</div>\r\n\r\n                                    {totalRecords > 20 ?\r\n                                        <Pagination totalRecords={totalRecords} pageLimit={pageLimit} pageNeighbours={1} onPageChanged={onPageChanged} />\r\n                                        : <p></p>\r\n                                    }\r\n                                </div>\r\n                            </React.Fragment>)\r\n                            : <p className=\"error\">NOT DATA</p>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Board;","import React from 'react'\r\nimport Board from '../../components/Board/Board'\r\nimport { useLocation } from \"react-router-dom\"\r\nimport './Information.css'\r\n\r\nconst Information = () => {\r\n    let location = useLocation();\r\n    let path = location.pathname.replace(\"/\",\"\")    \r\n    \r\n    return (\r\n        <div className={`information information--${path}`}>\r\n            <Board schema={path} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Information\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { chartData } from '../../utils/fetch/searchData.js'\r\n\r\n// API URL\r\nconst URL_BASE = \"https://rickandmortyapi.com/api/\" \r\n// options of the bar graph\r\nconst options = {\r\n    maintainAspectRatio: false,\r\n    responsive: true\r\n}\r\n// Base object of the bar graph data\r\nlet dataEmpty = {\r\n    labels: [],\r\n    datasets: [{\r\n        label: \"\",\r\n        backgroundColor: \"rgba(0,255,0,1)\",\r\n        borderColor: \"black\",\r\n        borderWidth: 1,\r\n        hoverBackgroundColor: \"rgba(0,255,0,2)\",\r\n        hoverBorderColor: '#FF0000',\r\n        data: []\r\n    }]\r\n}\r\n\r\nconst Chart = ({ section, label }) => {\r\n\r\n    // States\r\n    const [values, setValues] = useState(dataEmpty)\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    useEffect(() => {\r\n        if (values.datasets[0].data.length === 0) {\r\n            let data = {...dataEmpty}\r\n            chartData(URL_BASE, section, label)\r\n                .then((res) => {\r\n                    data.labels = res[0]\r\n                    data.datasets[0].label = label\r\n                    data.datasets[0].data = res[1]\r\n                    setValues(data)\r\n                    setLoading(false)\r\n                })\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"theme--2 chart\">\r\n            {loading\r\n                ? <div className=\"center-container\"><div className=\"lds-facebook\"><div></div><div></div><div></div></div></div>\r\n                : (<div style={{ width: \"100%\", height: \"500px\" }}>\r\n                    {values \r\n                    ? <Bar data={values} options={options} />\r\n                    : Error - 404}\r\n                </div>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart\r\n","// React\r\nimport React from 'react'\r\n// JSON\r\nimport db from \"../../data/data.json\"\r\n// Components\r\nimport Chart from '../../components/Chart/Chart'\r\n\r\n\r\nconst Graphics = () => {\r\n    const data = db.components[\"Chart\"]\r\n    const secions = Object.keys(db.components[\"Chart\"])\r\n\r\n    return (\r\n        <div>\r\n           <div className=\"Card theme--1\">\r\n           {secions.map((section,i) => {\r\n                return (\r\n                    <div key={section+\"Chart\"} >\r\n                        <div className=\"\">\r\n                            <h2 className=\"title\">\r\n                                {section.charAt(0).toUpperCase()+section.slice(1)+\"s\"}\r\n                            </h2>\r\n                        </div>\r\n                        <div className=\"\">\r\n                            <p className=\"mini-title\">\r\n                                {data[section].description}\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"\">\r\n                            <Chart section={section} label={data[section].label.name} />\r\n                        </div>\r\n                    </div>)\r\n            })}   \r\n            </div> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Graphics\r\n","import Navbar from \"./components/Navbar/Navbar\"\r\nimport Footer from \"./components/Footer/Footer\"\r\nimport Home from \"./pages/Home/Home\"\r\nimport Imformation from \"./pages/Information/Information\"\r\nimport Graphics from \"./pages/Graphics/Graphics\"\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\r\nimport \"./App.css\"\r\n\r\nconst App = () => {\r\n\r\n  return (\r\n    <div className=\"DARK\" id=\"\">\r\n      <Router>\r\n        <div className=\"App\">\r\n          <Navbar />\r\n          <div className=\"Content\">\r\n            <Switch>\r\n              <Route exact path=\"/dashboard/\">\r\n                <Graphics />\r\n              </Route>\r\n              <Route path={[\"/character/\", \"/location/\", \"/episode/\"]}>\r\n                <Imformation />\r\n              </Route>\r\n              <Route path=\"/\">\r\n                <Home />\r\n              </Route>\r\n            </Switch>\r\n          </div>\r\n          <Footer />\r\n        </div>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n//import \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}